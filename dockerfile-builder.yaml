project:
  title: &project_title Alphasocket/dockerized-httpd-alpine
  codename: &project_codename httpd-alpine
  description: Dockerized httpd service on alpine distro (FROM httpd:latest)

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    from: 'httpd:alpine'
    name: *project_codename
    ports:
      main: 
        valueFromCommand: '[ "$BUILD_ENV" = "$GENERAL_KEYS_DEV" ] && echo "$BUILD_HTTPD_PORT_DEV" || echo "$BUILD_HTTPD_PORT_PRD"'
    cmd: httpd-foreground
    httpd:
      port:
        dev: 80
        prd: 443
  imports:
    - "templates:/usr/local/templates"


#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: ""
      config: ""
    httpd:
      conf:
        path: /usr/local/apache2/conf
        main:
          valueFromParse: ${SETUP_HTTPD_CONF_PATH}/httpd.conf
        confd:
          valueFromParse: ${SETUP_HTTPD_CONF_PATH}/conf.d
        vhostd:
          valueFromParse: ${SETUP_HTTPD_CONF_PATH}/vhost.d
    php:
      fpm: True
  # Setup Processes
  processes:
    - title: "Install dependencies"
      shell_condition: '! "$SETUP_DEPENDENCIES_CONFIG$SETUP_DEPENDENCIES_SETUP" = ""'
      commands: 
        - "apk add --no-cache $SETUP_DEPENDENCIES_CONFIG $SETUP_DEPENDENCIES_SETUP"

    - title: "Enable required modules"
      commands:
        # Enable rewrite_module
        - sed -i '/LoadModule.*rewrite_module/ s/^#//' $SETUP_HTTPD_CONF_MAIN
        # Enable logio_module
        - sed -i '/LoadModule.*logio_module/ s/^#//' $SETUP_HTTPD_CONF_MAIN

    - title: "Setup optional conf folders"
      commands:
        # Add conf.d folder
        - mkdir $SETUP_HTTPD_CONF_CONFD
        - echo -ne "\nIncludeOptional $SETUP_HTTPD_CONF_CONFD/*.conf\n" >> $SETUP_HTTPD_CONF_MAIN
        # Add vhost.d folder
        - mkdir $SETUP_HTTPD_CONF_VHOSTD
        - echo -ne "\nIncludeOptional $SETUP_HTTPD_CONF_VHOSTD/*.conf\n" >> $SETUP_HTTPD_CONF_MAIN

    - title: "Enable Production required modules"
      shell_condition: '"$BUILD_ENV" = "$GENERAL_KEYS_PRD"'
      commands:
        # Enable ssl_module
        - sed -i '/LoadModule.*ssl_module/ s/^#//' $SETUP_HTTPD_CONF_MAIN

    - title: "Enable PHP FPM required modules"
      shell_condition: '"$SETUP_PHP_FPM" = "$GENERAL_KEYS_TRUE"'
      commands:
        # Enable proxy_module
        - sed -i '/LoadModule.*proxy_module/ s/^#//' $SETUP_HTTPD_CONF_MAIN
        # Enable proxy_fcgi_module
        - sed -i '/LoadModule.*proxy_fcgi_module/ s/^#//' $SETUP_HTTPD_CONF_MAIN

#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    httpd:
      servername:
          valueFromParse: $BUILD_NAME
      alias:
          valueFromParse: $BUILD_NAME
      timeout: 1000
      document:
        root: /var/www/html
        index: index.php
        options: FollowSymLinks
    php:
      proxy:
        timeout: 100
        regex: .+\.ph(p[3457]?|t|tml)$
      fpm:
        host: "php-fpm.service"
        #host: 127.0.0.1
        port: 9000
    paths:
      templates:
        httpd:
          server: /usr/local/templates/10-server.conf
          ssl: /usr/local/templates/10-ssl.conf
          fastcgi: /usr/local/templates/20-fastcgi.conf
          vhost: 
            dev: /usr/local/templates/dev_vhost.conf
            prd: /usr/local/templates/prd_vhost.conf
      conf:
        httpd:
          server: ${SETUP_HTTPD_CONF_CONFD}/10-server.conf
          ssl: ${SETUP_HTTPD_CONF_CONFD}/10-ssl.conf
          fastcgi: ${SETUP_HTTPD_CONF_CONFD}/20-fastcgi.conf
          vhost: ${SETUP_HTTPD_CONF_VHOSTD}/main.conf
          
  processes:
    - title: "Make sure webroot exists"
      commands:
        - "mkdir -p ${CONFIG_HTTPD_DOCUMENT_ROOT}"

    - title: "Create server conf"
      commands:
       - cp $CONFIG_PATHS_TEMPLATES_HTTPD_SERVER $CONFIG_PATHS_CONF_HTTPD_SERVER

    - title: "Create Production configurations"
      shell_condition: '"$BUILD_ENV" = "$GENERAL_KEYS_PRD"'
      commands:
        # Enable ssl_module
       - cp $CONFIG_PATHS_TEMPLATES_HTTPD_SSL $CONFIG_PATHS_CONF_HTTPD_SSL

    - title: "Create fastcgi conf"
      shell_condition: '"$SETUP_PHP_FPM" = "$GENERAL_KEYS_TRUE"'
      commands:
       #- while read line; do eval echo \"$line\"; done < $HTTPD_FAST_CGI_CONF_TEMPLATE_PATH >> $HTTPD_FAST_CGI_CONF_PATH

       #- sed -i -e 's/<PHP_FPM_HOST>/'$CONFIG_PHP_FPM_HOST'/g' $HTTPD_FAST_CGI_CONF_PATH
       #- sed -i -e 's/<PHP_FPM_PORT>/'$CONFIG_PHP_FPM_PORT'/g' $HTTPD_FAST_CGI_CONF_PATH
       #- sed -i -e 's/<PHP_PROXY_REGEX>/'${CONFIG_PHP_PROXY_REGEX}'/g' $HTTPD_FAST_CGI_CONF_PATH
       #- sed -i -e 's/<PHP_PROXY_TIMEOUT>/'${CONFIG_PHP_PROXY_TIMEOUT}'/g' $HTTPD_FAST_CGI_CONF_PATH
       - cp $CONFIG_PATHS_TEMPLATES_HTTPD_FASTCGI $CONFIG_PATHS_CONF_HTTPD_FASTCGI

    - title: "Set vhost template"
      commands:
        - VHOST_TEMPLATE=$CONFIG_PATHS_TEMPLATES_HTTPD_VHOST_PRD
    
    - title: "Override vhost template if dev"
      shell_condition: '"$BUILD_ENV" = "$GENERAL_KEYS_DEV"'
      commands:
        - VHOST_TEMPLATE=$CONFIG_PATHS_TEMPLATES_HTTPD_VHOST_DEV

    - title: "Create vhost conf"
      commands:
        # Create vhost
        - cp $VHOST_TEMPLATE $CONFIG_PATHS_CONF_HTTPD_VHOST
    
test:
  envvars:
    volumes:
      webroot: volumes/test_webroot:$CONFIG_HTTPD_DOCUMENT_ROOT
  processes:

    # 
    # Run httpd
    # 
    - title: "Starting httpd container"
      commands: 
        - CURDIR=$(pwd)
        - TEST_HTTPD_CONTAINER_ID=$(
            docker run 
              -d --name=${TEST_CONTAINER_NAME}
              -e CONFIG_HTTPD_DOCUMENT_ROOT=${CONFIG_HTTPD_DOCUMENT_ROOT}
              -e CONFIG_PHP_FPM_HOST=127.0.0.1
              -v ${CURDIR}/${TEST_VOLUMES_WEBROOT}
              -p ${TEST_HOST_PORT}:${BUILD_DOCKERFILE_PORTS_MAIN}
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )
        - TEST_HTTPD_CONTAINER_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_HTTPD_CONTAINER_ID)

    - title: "Testing httpd container"
      shell_condition: '! "$TEST_HTTPD_CONTAINER_STATUS" = "true"'
      commands:
        - echo "Httpd container failed, print logs and exiting\n"
        - docker logs $TEST_HTTPD_CONTAINER_ID
        - exit 1
        
    # 
    # Run php-fpm
    # 
    - title: "Running PHP-FPM container"
      shell_condition: '"$SETUP_PHP_FPM" = "$GENERAL_KEYS_TRUE"'
      commands: 
        - TEST_PHP_CONTAINER_ID=$(
            docker run 
              -d --net=container:${TEST_CONTAINER_NAME} 
              -v ${CURDIR}/${TEST_VOLUMES_WEBROOT}
              docker.io/alphasocket/php-fpm-alpine:7.0
          )
        - sleep 1
        - TEST_PHP_CONTAINER_STATUS=$(docker inspect -f '{{.State.Running}}' $TEST_PHP_CONTAINER_ID)
      else:
        - TEST_PHP_CONTAINER_STATUS="true"

    - title: "Testing PHP-FPM container"
      shell_condition: '! "$TEST_PHP_CONTAINER_STATUS" = "true"'
      commands:
        - echo "PHP-FPM container failed, print logs and exiting\n"
        - docker logs $TEST_PHP_CONTAINER_ID
        - exit 1

    #
    # TESTING
    #
    - title: "Testing httpd"
      commands:
        - HTTP_CODE=$( sleep 1 && curl -sLI 127.0.0.1:${TEST_PORT}/index.html -o /dev/null -w '%{http_code}\n' )

    - title: "Checking exit code"
      shell_condition: '! "$HTTP_CODE" = "200"'
      commands:
        - echo "### Test failed, received HTTP code ${HTTP_CODE} printing log\n" 
        - docker logs $TEST_HTTPD_CONTAINER_ID
        - exit 1

    - title: "Testing PHP service"
      shell_condition: '"$SETUP_PHP_FPM" = "$GENERAL_KEYS_TRUE"'
      commands:
        - CONDITION="curl -sf 127.0.0.1:${TEST_PORT}/index.php --max-time 1 -o /dev/null"
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ]; then exit 1; else c=$(($c + 1)); fi;
            echo "Try $c failed"; 
            sleep ${SECONDS_BETWEEN_TRIES}; 
          done
        - HTTP_CONTENT=$(curl -s 127.0.0.1:${TEST_PORT}/index.php)
        - PHP_TEST=$( echo "$HTTP_CONTENT" | grep -q "http://www.php.net/" && echo "Success")

    - title: "Check PHP test"
      shell_condition: '"$SETUP_PHP_FPM" = "$GENERAL_KEYS_TRUE"'
      commands:
        - if [ "$PHP_TEST" = "Success" ]; then
            echo "### Test succeeded\n";
          else
            echo "### Test failed\n";
            exit 1;
          fi

